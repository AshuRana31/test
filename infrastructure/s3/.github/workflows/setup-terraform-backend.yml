name: 'Setup Terraform Backend'

on:
  workflow_dispatch:
    inputs:
      aws_region:
        description: 'AWS Region for Terraform backend'
        required: true
        default: 'us-east-1'
        type: string
      state_bucket_name:
        description: 'S3 bucket name for Terraform state (must be globally unique)'
        required: true
        type: string
      lock_table_name:
        description: 'DynamoDB table name for Terraform state locking'
        required: true
        default: 'terraform-state-lock'
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  setup-backend:
    name: 'Setup Terraform Backend Infrastructure'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam:::role/GitHubActionsRole
          role-session-name: GitHubActions-SetupBackend
          aws-region: 

      - name: Create Terraform State S3 Bucket
        run: |
          # Check if bucket exists
          if aws s3api head-bucket --bucket "" 2>/dev/null; then
            echo "âœ… S3 bucket  already exists"
          else
            echo "ðŸš€ Creating S3 bucket for Terraform state..."
            
            # Create bucket
            if [ "" = "us-east-1" ]; then
              aws s3api create-bucket --bucket ""
            else
              aws s3api create-bucket \
                --bucket "" \
                --region "" \
                --create-bucket-configuration LocationConstraint=""
            fi
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket "" \
              --versioning-configuration Status=Enabled
            
            # Enable server-side encryption
            aws s3api put-bucket-encryption \
              --bucket "" \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
            
            # Block public access
            aws s3api put-public-access-block \
              --bucket "" \
              --public-access-block-configuration \
                BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            
            echo "âœ… S3 bucket  created successfully"
          fi

      - name: Create DynamoDB Table for State Locking
        run: |
          # Check if table exists
          if aws dynamodb describe-table --table-name "" 2>/dev/null; then
            echo "âœ… DynamoDB table  already exists"
          else
            echo "ðŸš€ Creating DynamoDB table for Terraform state locking..."
            
            aws dynamodb create-table \
              --table-name "" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region ""
            
            # Wait for table to be active
            aws dynamodb wait table-exists --table-name ""
            
            echo "âœ… DynamoDB table  created successfully"
          fi

      - name: Update Repository Secrets
        uses: actions/github-script@v7
        with:
          github-token: 
          script: |
            const sodium = require('tweetsodium');
            
            // Get repository public key
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Function to encrypt secret
            function encryptSecret(secret) {
              const messageBytes = Buffer.from(secret);
              const keyBytes = Buffer.from(publicKey.key, 'base64');
              const encryptedBytes = sodium.seal(messageBytes, keyBytes);
              return Buffer.from(encryptedBytes).toString('base64');
            }
            
            // Update secrets
            const secrets = [
              {
                name: 'TERRAFORM_STATE_BUCKET',
                value: ''
              },
              {
                name: 'TERRAFORM_LOCK_TABLE',
                value: ''
              }
            ];
            
            for (const secret of secrets) {
              await github.rest.actions.createOrUpdateRepoSecret({
                owner: context.repo.owner,
                repo: context.repo.repo,
                secret_name: secret.name,
                encrypted_value: encryptSecret(secret.value),
                key_id: publicKey.key_id,
              });
              console.log(`âœ… Updated secret: ${secret.name}`);
            }

      - name: Summary
        run: |
          echo "ðŸŽ‰ Terraform Backend Setup Complete!"
          echo ""
          echo "ðŸ“‹ Configuration Summary:"
          echo "- S3 Bucket: "
          echo "- DynamoDB Table: "
          echo "- AWS Region: "
          echo ""
          echo "âœ… Repository secrets updated:"
          echo "- TERRAFORM_STATE_BUCKET"
          echo "- TERRAFORM_LOCK_TABLE"
          echo ""
          echo "ðŸš€ You can now run Terraform deployments!"
