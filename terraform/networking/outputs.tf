# AWS Multi-Environment Networking Infrastructure Outputs
# Generated by Backstage AWS Networking Template
# Single Terraform configuration with environment-specific .tfvars files

# VPC Information
output "vpc_id" {
  description = "ID of the created VPC"
  value       = aws_vpc.main.id
}

output "vpc_cidr" {
  description = "CIDR block of the created VPC"
  value       = aws_vpc.main.cidr_block
}

output "vpc_name" {
  description = "Name of the created VPC"
  value       = local.vpc_name
}

output "environment" {
  description = "Environment name"
  value       = var.environment
}

output "region" {
  description = "AWS region"
  value       = var.region
}

# Availability Zones
output "availability_zones" {
  description = "List of availability zones used"
  value       = local.selected_azs
}

# Subnet Information
output "public_subnet_ids" {
  description = "IDs of the created public subnets"
  value       = aws_subnet.public[*].id
}

output "public_subnet_cidrs" {
  description = "CIDR blocks of the created public subnets"
  value       = aws_subnet.public[*].cidr_block
}

output "private_subnet_ids" {
  description = "IDs of the created private subnets"
  value       = aws_subnet.private[*].id
}

output "private_subnet_cidrs" {
  description = "CIDR blocks of the created private subnets"
  value       = aws_subnet.private[*].cidr_block
}

output "database_subnet_ids" {
  description = "IDs of the created database subnets"
  value       = aws_subnet.database[*].id
}

output "database_subnet_cidrs" {
  description = "CIDR blocks of the created database subnets"
  value       = aws_subnet.database[*].cidr_block
}

output "database_subnet_group_name" {
  description = "Name of the database subnet group"
  value       = length(aws_db_subnet_group.main) > 0 ? aws_db_subnet_group.main[0].name : null
}

# Gateway Information
output "internet_gateway_id" {
  description = "ID of the created Internet Gateway"
  value       = aws_internet_gateway.main.id
}

output "nat_gateway_ids" {
  description = "IDs of the created NAT Gateways"
  value       = aws_nat_gateway.main[*].id
}

output "nat_gateway_public_ips" {
  description = "Public IP addresses of the NAT Gateways"
  value       = aws_eip.nat[*].public_ip
}

# Route Table Information
output "public_route_table_id" {
  description = "ID of the public route table"
  value       = length(aws_route_table.public) > 0 ? aws_route_table.public[0].id : null
}

output "private_route_table_ids" {
  description = "IDs of the private route tables"
  value       = aws_route_table.private[*].id
}

output "database_route_table_id" {
  description = "ID of the database route table"
  value       = length(aws_route_table.database) > 0 ? aws_route_table.database[0].id : null
}

# Security Group Information
output "vpc_endpoints_security_group_id" {
  description = "ID of the VPC endpoints security group"
  value       = length(aws_security_group.vpc_endpoints) > 0 ? aws_security_group.vpc_endpoints[0].id : null
}

# VPC Endpoints
output "s3_vpc_endpoint_id" {
  description = "ID of the S3 VPC endpoint"
  value       = length(aws_vpc_endpoint.s3) > 0 ? aws_vpc_endpoint.s3[0].id : null
}

output "ecr_dkr_vpc_endpoint_id" {
  description = "ID of the ECR DKR VPC endpoint"
  value       = length(aws_vpc_endpoint.ecr_dkr) > 0 ? aws_vpc_endpoint.ecr_dkr[0].id : null
}

output "ecr_api_vpc_endpoint_id" {
  description = "ID of the ECR API VPC endpoint"
  value       = length(aws_vpc_endpoint.ecr_api) > 0 ? aws_vpc_endpoint.ecr_api[0].id : null
}

# Flow Logs
output "vpc_flow_log_group_name" {
  description = "Name of the CloudWatch Log Group for VPC Flow Logs"
  value       = length(aws_cloudwatch_log_group.flow_logs) > 0 ? aws_cloudwatch_log_group.flow_logs[0].name : null
}

output "vpc_flow_log_group_arn" {
  description = "ARN of the CloudWatch Log Group for VPC Flow Logs"
  value       = length(aws_cloudwatch_log_group.flow_logs) > 0 ? aws_cloudwatch_log_group.flow_logs[0].arn : null
}

# Network Configuration Summary
output "network_summary" {
  description = "Summary of the network configuration"
  value = {
    vpc_id           = aws_vpc.main.id
    vpc_cidr         = aws_vpc.main.cidr_block
    environment      = var.environment
    network_tier     = var.network_tier
    az_count         = local.az_count
    public_subnets   = length(aws_subnet.public)
    private_subnets  = length(aws_subnet.private)
    database_subnets = length(aws_subnet.database)
    nat_gateways     = length(aws_nat_gateway.main)
    vpc_endpoints    = var.enable_vpc_endpoints
    flow_logs        = var.enable_vpc_flow_logs
  }
}

# Terraform State Information
output "terraform_workspace" {
  description = "Terraform workspace used for this deployment"
  value       = terraform.workspace
}

# Cost Estimation Information
output "estimated_monthly_cost" {
  description = "Estimated monthly cost breakdown (USD)"
  value = {
    nat_gateways = length(aws_nat_gateway.main) * 45
    vpc_endpoints = var.enable_vpc_endpoints ? (length(aws_vpc_endpoint.ecr_dkr) + length(aws_vpc_endpoint.ecr_api)) * 7.20 : 0
    flow_logs = var.enable_vpc_flow_logs ? 25 : 0
    total_estimated = (length(aws_nat_gateway.main) * 45) + (var.enable_vpc_endpoints ? (length(aws_vpc_endpoint.ecr_dkr) + length(aws_vpc_endpoint.ecr_api)) * 7.20 : 0) + (var.enable_vpc_flow_logs ? 25 : 0)
  }
}