# Advanced AWS Multi-Environment Networking Infrastructure Outputs
# Generated by Backstage Advanced AWS Networking Template

# VPC Outputs
output "vpc_id" {
  description = "ID of the VPC"
  value       = aws_vpc.main.id
}

output "vpc_arn" {
  description = "ARN of the VPC"
  value       = aws_vpc.main.arn
}

output "vpc_cidr_block" {
  description = "CIDR block of the VPC"
  value       = aws_vpc.main.cidr_block
}



output "vpc_default_security_group_id" {
  description = "ID of the default security group"
  value       = aws_vpc.main.default_security_group_id
}

output "vpc_default_network_acl_id" {
  description = "ID of the default network ACL"
  value       = aws_vpc.main.default_network_acl_id
}

output "vpc_default_route_table_id" {
  description = "ID of the default route table"
  value       = aws_vpc.main.default_route_table_id
}

# Internet Gateway Outputs

output "internet_gateway_id" {
  description = "ID of the Internet Gateway"
  value       = var.public_subnet_count > 0 ? aws_internet_gateway.main[0].id : null
}

output "internet_gateway_arn" {
  description = "ARN of the Internet Gateway"
  value       = var.public_subnet_count > 0 ? aws_internet_gateway.main[0].arn : null
}


# Subnet Outputs
output "public_subnet_ids" {
  description = "IDs of the public subnets"
  value       = aws_subnet.public[*].id
}

output "public_subnet_arns" {
  description = "ARNs of the public subnets"
  value       = aws_subnet.public[*].arn
}

output "public_subnet_cidr_blocks" {
  description = "CIDR blocks of the public subnets"
  value       = aws_subnet.public[*].cidr_block
}

output "public_subnet_availability_zones" {
  description = "Availability zones of the public subnets"
  value       = aws_subnet.public[*].availability_zone
}

output "private_subnet_ids" {
  description = "IDs of the private subnets"
  value       = aws_subnet.private[*].id
}

output "private_subnet_arns" {
  description = "ARNs of the private subnets"
  value       = aws_subnet.private[*].arn
}

output "private_subnet_cidr_blocks" {
  description = "CIDR blocks of the private subnets"
  value       = aws_subnet.private[*].cidr_block
}

output "private_subnet_availability_zones" {
  description = "Availability zones of the private subnets"
  value       = aws_subnet.private[*].availability_zone
}

output "database_subnet_ids" {
  description = "IDs of the database subnets"
  value       = aws_subnet.database[*].id
}

output "database_subnet_arns" {
  description = "ARNs of the database subnets"
  value       = aws_subnet.database[*].arn
}

output "database_subnet_cidr_blocks" {
  description = "CIDR blocks of the database subnets"
  value       = aws_subnet.database[*].cidr_block
}

output "database_subnet_availability_zones" {
  description = "Availability zones of the database subnets"
  value       = aws_subnet.database[*].availability_zone
}

output "database_subnet_group_id" {
  description = "ID of the database subnet group"
  value       = var.database_subnet_count > 0 ? aws_db_subnet_group.main[0].id : null
}

output "database_subnet_group_arn" {
  description = "ARN of the database subnet group"
  value       = var.database_subnet_count > 0 ? aws_db_subnet_group.main[0].arn : null
}

# NAT Gateway Outputs

output "nat_gateway_ids" {
  description = "IDs of the NAT Gateways"
  value       = aws_nat_gateway.main[*].id
}

output "nat_gateway_public_ips" {
  description = "Public IP addresses of the NAT Gateways"
  value       = aws_nat_gateway.main[*].public_ip
}

output "nat_gateway_private_ips" {
  description = "Private IP addresses of the NAT Gateways"
  value       = aws_nat_gateway.main[*].private_ip
}

output "elastic_ip_ids" {
  description = "IDs of the Elastic IPs for NAT Gateways"
  value       = aws_eip.nat[*].id
}

output "elastic_ip_public_ips" {
  description = "Public IP addresses of the Elastic IPs"
  value       = aws_eip.nat[*].public_ip
}


# Route Table Outputs
output "public_route_table_ids" {
  description = "IDs of the public route tables"
  value       = aws_route_table.public[*].id
}

output "private_route_table_ids" {
  description = "IDs of the private route tables"
  value       = aws_route_table.private[*].id
}

output "database_route_table_ids" {
  description = "IDs of the database route tables"
  value       = aws_route_table.database[*].id
}

# Security Group Outputs

output "web_tier_security_group_id" {
  description = "ID of the web tier security group"
  value       = contains(var.security_group_templates, "web-tier") ? aws_security_group.web_tier[0].id : null
}

output "app_tier_security_group_id" {
  description = "ID of the app tier security group"
  value       = contains(var.security_group_templates, "app-tier") ? aws_security_group.app_tier[0].id : null
}

output "db_tier_security_group_id" {
  description = "ID of the database tier security group"
  value       = contains(var.security_group_templates, "db-tier") ? aws_security_group.db_tier[0].id : null
}






# VPC Flow Logs Outputs
output "vpc_flow_logs_id" {
  description = "ID of the VPC Flow Logs"
  value       = var.enable_vpc_flow_logs ? aws_flow_log.vpc[0].id : null
}

output "vpc_flow_logs_log_group_name" {
  description = "Name of the CloudWatch Log Group for VPC Flow Logs"
  value       = var.enable_vpc_flow_logs && var.vpc_flow_logs_destination == "cloudwatch" ? aws_cloudwatch_log_group.vpc_flow_logs[0].name : null
}

output "vpc_flow_logs_s3_bucket_name" {
  description = "Name of the S3 bucket for VPC Flow Logs"
  value       = var.enable_vpc_flow_logs && var.vpc_flow_logs_destination == "s3" ? aws_s3_bucket.vpc_flow_logs[0].bucket : null
}

# Availability Zone Information
output "availability_zones" {
  description = "List of availability zones used"
  value       = data.aws_availability_zones.available.names
}

output "availability_zones_count" {
  description = "Number of availability zones used"
  value       = var.availability_zones
}

# Network Summary
output "network_summary" {
  description = "Summary of the network configuration"
  value = {
    project_name           = var.project_name
    environment           = var.environment
    region                = var.region
    vpc_id                = aws_vpc.main.id
    vpc_cidr              = aws_vpc.main.cidr_block
    availability_zones    = var.availability_zones
    public_subnets_count  = var.public_subnet_count
    private_subnets_count = var.private_subnet_count
    database_subnets_count = var.database_subnet_count
    nat_gateway_strategy  = var.nat_gateway_strategy
    vpc_flow_logs_enabled = var.enable_vpc_flow_logs
    vpc_endpoints_enabled = var.enable_vpc_endpoints
    vpn_gateway_enabled   = var.enable_vpn_gateway
  }
}

# Cost Estimation Outputs
output "estimated_monthly_costs" {
  description = "Estimated monthly costs for the infrastructure"
  value = {
    
    nat_gateways = {
      count = local.nat_gateway_count
      estimated_cost_usd = local.nat_gateway_count * 45
      description = "NAT Gateway costs (~$45/month per gateway)"
    }
    
    
    vpc_flow_logs = {
      enabled = var.enable_vpc_flow_logs
      estimated_cost_usd = var.enable_vpc_flow_logs ? 10 : 0
      description = "VPC Flow Logs costs (variable, ~$10-50/month based on traffic)"
    }
    total_estimated_monthly_cost = (
      local.nat_gateway_count * 45 + 
      
      (var.enable_vpc_flow_logs ? 10 : 0)
    )
  }
}

# Resource Inventory
output "resource_inventory" {
  description = "Inventory of all created resources"
  value = {
    vpc = {
      id   = aws_vpc.main.id
      name = aws_vpc.main.tags.Name
      cidr = aws_vpc.main.cidr_block
    }
    subnets = {
      public = [
        for subnet in aws_subnet.public : {
          id   = subnet.id
          name = subnet.tags.Name
          cidr = subnet.cidr_block
          az   = subnet.availability_zone
        }
      ]
      private = [
        for subnet in aws_subnet.private : {
          id   = subnet.id
          name = subnet.tags.Name
          cidr = subnet.cidr_block
          az   = subnet.availability_zone
        }
      ]
      database = [
        for subnet in aws_subnet.database : {
          id   = subnet.id
          name = subnet.tags.Name
          cidr = subnet.cidr_block
          az   = subnet.availability_zone
        }
      ]
    }
    
    nat_gateways = [
      for nat in aws_nat_gateway.main : {
        id        = nat.id
        public_ip = nat.public_ip
        subnet_id = nat.subnet_id
      }
    ]
    
    route_tables = {
      public   = aws_route_table.public[*].id
      private  = aws_route_table.private[*].id
      database = aws_route_table.database[*].id
    }
  }
}
