# AWS Multi-Environment Networking Infrastructure
# Generated by Backstage AWS Networking Template
# Single Terraform configuration with environment-specific .tfvars files

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  
  # Configure your backend here - uncomment and customize
  # backend "s3" {
  #   bucket         = "your-terraform-state-bucket"
  #   key            = "networking/terraform.tfstate"
  #   region         = var.region
  #   dynamodb_table = "terraform-state-lock"
  #   encrypt        = true
  # }
}

# AWS Provider configuration
provider "aws" {
  region = var.region
  
  default_tags {
    tags = {
      Project     = var.project_name
      Client      = var.client_name
      Environment = var.environment
      ManagedBy   = "terraform"
      NetworkTier = var.network_tier
    }
  }
}

# Data sources
data "aws_availability_zones" "available" {
  state = "available"
}

data "aws_caller_identity" "current" {}

# Local values for calculations and configurations
locals {
  # VPC naming
  vpc_name = "${var.client_name}-${var.environment}-vpc"
  
  # Number of AZs to use
  az_count = var.availability_zones
  selected_azs = slice(data.aws_availability_zones.available.names, 0, local.az_count)
  
  # Subnet configuration based on network tier
  subnet_config = {
    basic = {
      public_subnets   = true
      private_subnets  = false
      database_subnets = false
    }
    standard = {
      public_subnets   = true
      private_subnets  = true
      database_subnets = false
    }
    advanced = {
      public_subnets   = true
      private_subnets  = true
      database_subnets = true
    }
  }
  
  current_subnet_config = local.subnet_config[var.network_tier]
  
  # Calculate subnet CIDRs
  # For a /16 VPC, we'll use /20 subnets (4096 IPs each)
  # This allows for 16 subnets per VPC
  subnet_bits = 4 # /16 + 4 = /20
  
  public_subnet_cidrs = local.current_subnet_config.public_subnets ? [
    for i in range(local.az_count) : cidrsubnet(var.vpc_cidr, local.subnet_bits, i)
  ] : []
  
  private_subnet_cidrs = local.current_subnet_config.private_subnets ? [
    for i in range(local.az_count) : cidrsubnet(var.vpc_cidr, local.subnet_bits, i + local.az_count)
  ] : []
  
  database_subnet_cidrs = local.current_subnet_config.database_subnets ? [
    for i in range(local.az_count) : cidrsubnet(var.vpc_cidr, local.subnet_bits, i + (local.az_count * 2))
  ] : []

  # Common tags
  common_tags = {
    Environment = var.environment
    Project     = var.project_name
    Client      = var.client_name
    ManagedBy   = "terraform"
    NetworkTier = var.network_tier
  }
}

# VPC
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = merge(local.common_tags, {
    Name = local.vpc_name
  })
}

# Internet Gateway
resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-igw"
  })
}

# Public Subnets
resource "aws_subnet" "public" {
  count = length(local.public_subnet_cidrs)
  
  vpc_id                  = aws_vpc.main.id
  cidr_block              = local.public_subnet_cidrs[count.index]
  availability_zone       = local.selected_azs[count.index]
  map_public_ip_on_launch = true

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-public-${substr(local.selected_azs[count.index], -1, 1)}"
    Type = "public"
    Tier = "public"
  })
}

# Private Subnets
resource "aws_subnet" "private" {
  count = length(local.private_subnet_cidrs)
  
  vpc_id            = aws_vpc.main.id
  cidr_block        = local.private_subnet_cidrs[count.index]
  availability_zone = local.selected_azs[count.index]

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-private-${substr(local.selected_azs[count.index], -1, 1)}"
    Type = "private"
    Tier = "private"
  })
}

# Database Subnets (for advanced tier)
resource "aws_subnet" "database" {
  count = length(local.database_subnet_cidrs)
  
  vpc_id            = aws_vpc.main.id
  cidr_block        = local.database_subnet_cidrs[count.index]
  availability_zone = local.selected_azs[count.index]

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-database-${substr(local.selected_azs[count.index], -1, 1)}"
    Type = "database"
    Tier = "database"
  })
}

# Elastic IPs for NAT Gateways
resource "aws_eip" "nat" {
  count = var.enable_nat_gateway && length(local.private_subnet_cidrs) > 0 ? local.az_count : 0
  
  domain = "vpc"

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-nat-eip-${count.index + 1}"
  })

  depends_on = [aws_internet_gateway.main]
}

# NAT Gateways (one per AZ for high availability)
resource "aws_nat_gateway" "main" {
  count = var.enable_nat_gateway && length(local.private_subnet_cidrs) > 0 ? local.az_count : 0
  
  allocation_id = aws_eip.nat[count.index].id
  subnet_id     = aws_subnet.public[count.index].id

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-nat-${count.index + 1}"
  })

  depends_on = [aws_internet_gateway.main]
}

# Public Route Table
resource "aws_route_table" "public" {
  count = length(local.public_subnet_cidrs) > 0 ? 1 : 0
  
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-public-rt"
  })
}

# Public Route Table Associations
resource "aws_route_table_association" "public" {
  count = length(local.public_subnet_cidrs)
  
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public[0].id
}

# Private Route Tables (one per AZ for NAT Gateway routing)
resource "aws_route_table" "private" {
  count = length(local.private_subnet_cidrs)
  
  vpc_id = aws_vpc.main.id

  # Add route to NAT Gateway if enabled
  dynamic "route" {
    for_each = var.enable_nat_gateway ? [1] : []
    content {
      cidr_block     = "0.0.0.0/0"
      nat_gateway_id = aws_nat_gateway.main[count.index].id
    }
  }

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-private-rt-${count.index + 1}"
  })
}

# Private Route Table Associations
resource "aws_route_table_association" "private" {
  count = length(local.private_subnet_cidrs)
  
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private[count.index].id
}

# Database Route Table
resource "aws_route_table" "database" {
  count = length(local.database_subnet_cidrs) > 0 ? 1 : 0
  
  vpc_id = aws_vpc.main.id

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-database-rt"
  })
}

# Database Route Table Associations
resource "aws_route_table_association" "database" {
  count = length(local.database_subnet_cidrs)
  
  subnet_id      = aws_subnet.database[count.index].id
  route_table_id = aws_route_table.database[0].id
}

# Database Subnet Group (for RDS)
resource "aws_db_subnet_group" "main" {
  count = length(local.database_subnet_cidrs) > 0 ? 1 : 0
  
  name       = "${local.vpc_name}-db-subnet-group"
  subnet_ids = aws_subnet.database[*].id

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-db-subnet-group"
  })
}

# VPC Flow Logs (when enabled)
resource "aws_flow_log" "main" {
  count = var.enable_vpc_flow_logs ? 1 : 0
  
  iam_role_arn    = aws_iam_role.flow_logs[0].arn
  log_destination = aws_cloudwatch_log_group.flow_logs[0].arn
  traffic_type    = "ALL"
  vpc_id          = aws_vpc.main.id

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-flow-logs"
  })
}

resource "aws_cloudwatch_log_group" "flow_logs" {
  count = var.enable_vpc_flow_logs ? 1 : 0
  
  name              = "/aws/vpc-flow-logs/${local.vpc_name}"
  retention_in_days = var.environment == "production" ? 90 : 30

  tags = local.common_tags
}

resource "aws_iam_role" "flow_logs" {
  count = var.enable_vpc_flow_logs ? 1 : 0
  
  name = "${local.vpc_name}-flow-logs-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "vpc-flow-logs.amazonaws.com"
        }
      }
    ]
  })

  tags = local.common_tags
}

resource "aws_iam_role_policy" "flow_logs" {
  count = var.enable_vpc_flow_logs ? 1 : 0
  
  name = "${local.vpc_name}-flow-logs-policy"
  role = aws_iam_role.flow_logs[0].id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ]
        Effect   = "Allow"
        Resource = "*"
      }
    ]
  })
}

# VPC Endpoints (optional)
resource "aws_vpc_endpoint" "s3" {
  count = var.enable_vpc_endpoints ? 1 : 0
  
  vpc_id       = aws_vpc.main.id
  service_name = "com.amazonaws.${var.region}.s3"
  
  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-s3-endpoint"
  })
}

resource "aws_vpc_endpoint" "ecr_dkr" {
  count = var.enable_vpc_endpoints && length(local.private_subnet_cidrs) > 0 ? 1 : 0
  
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.ecr.dkr"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = aws_subnet.private[*].id
  security_group_ids  = [aws_security_group.vpc_endpoints[0].id]
  
  private_dns_enabled = true

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-ecr-dkr-endpoint"
  })
}

resource "aws_vpc_endpoint" "ecr_api" {
  count = var.enable_vpc_endpoints && length(local.private_subnet_cidrs) > 0 ? 1 : 0
  
  vpc_id              = aws_vpc.main.id
  service_name        = "com.amazonaws.${var.region}.ecr.api"
  vpc_endpoint_type   = "Interface"
  subnet_ids          = aws_subnet.private[*].id
  security_group_ids  = [aws_security_group.vpc_endpoints[0].id]
  
  private_dns_enabled = true

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-ecr-api-endpoint"
  })
}

# Security Group for VPC Endpoints
resource "aws_security_group" "vpc_endpoints" {
  count = var.enable_vpc_endpoints && length(local.private_subnet_cidrs) > 0 ? 1 : 0
  
  name_prefix = "${local.vpc_name}-vpc-endpoints-"
  vpc_id      = aws_vpc.main.id

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = [aws_vpc.main.cidr_block]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = merge(local.common_tags, {
    Name = "${local.vpc_name}-vpc-endpoints-sg"
  })
}