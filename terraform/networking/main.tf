# Advanced AWS Multi-Environment Networking Infrastructure
# Generated by Backstage Advanced AWS Networking Template
# Project: {{ values.projectName }}
# Client: {{ values.clientName }}

terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  
  # Configure your backend here
  # backend "s3" {
  #   bucket = "your-terraform-state-bucket"
  #   key    = "networking/{{ values.projectName }}/terraform.tfstate"
  #   region = "{{ values.region }}"
  # }
}

# Configure the AWS Provider
provider "aws" {
  region = var.region
  
  default_tags {
    tags = local.common_tags
  }
}

# Data source for availability zones
data "aws_availability_zones" "available" {
  state = "available"
}

# Data source for current AWS account
data "aws_caller_identity" "current" {}

# Local values for computed configurations
locals {
  # Common tags applied to all resources
  common_tags = merge(
    {
      Project             = var.project_name
      Client              = var.client_name
      Environment         = var.environment
      ManagedBy          = "Terraform"
      CreatedBy          = "Backstage"
      TechnicalContact   = var.technical_contact
      CostCenter         = var.cost_center
      CreationDate       = timestamp()
    },
    var.custom_tags
  )
  
  # Calculate subnet CIDRs dynamically
  total_subnets = var.public_subnet_count + var.private_subnet_count + var.database_subnet_count
  
  # Create subnet configurations
  public_subnets = var.public_subnet_count > 0 ? [
    for i in range(var.public_subnet_count) : {
      name              = "${var.project_name}-${var.environment}-public-${i + 1}"
      cidr_block        = cidrsubnet(var.vpc_cidr, 8, i)
      availability_zone = data.aws_availability_zones.available.names[i % var.availability_zones]
      type              = "public"
      map_public_ip     = var.map_public_ip_on_launch
    }
  ] : []
  
  private_subnets = var.private_subnet_count > 0 ? [
    for i in range(var.private_subnet_count) : {
      name              = "${var.project_name}-${var.environment}-private-${i + 1}"
      cidr_block        = cidrsubnet(var.vpc_cidr, 8, var.public_subnet_count + i)
      availability_zone = data.aws_availability_zones.available.names[i % var.availability_zones]
      type              = "private"
      map_public_ip     = false
    }
  ] : []
  
  database_subnets = var.database_subnet_count > 0 ? [
    for i in range(var.database_subnet_count) : {
      name              = "${var.project_name}-${var.environment}-database-${i + 1}"
      cidr_block        = cidrsubnet(var.vpc_cidr, 8, var.public_subnet_count + var.private_subnet_count + i)
      availability_zone = data.aws_availability_zones.available.names[i % var.availability_zones]
      type              = "database"
      map_public_ip     = false
    }
  ] : []
  
  # Combine all subnets
  all_subnets = concat(local.public_subnets, local.private_subnets, local.database_subnets)
  
  # NAT Gateway configuration
  nat_gateway_count = var.nat_gateway_strategy == "per-az" ? var.availability_zones : (var.nat_gateway_strategy == "single" ? 1 : 0)
}

# VPC
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = var.enable_dns_hostnames
  enable_dns_support   = var.enable_dns_resolution
  
  
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-vpc"
    Type = "VPC"
  })
}


# Internet Gateway
resource "aws_internet_gateway" "main" {
  count  = var.public_subnet_count > 0 ? 1 : 0
  vpc_id = aws_vpc.main.id
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-igw"
    Type = "InternetGateway"
  })
}


# Public Subnets
resource "aws_subnet" "public" {
  count = length(local.public_subnets)
  
  vpc_id                  = aws_vpc.main.id
  cidr_block              = local.public_subnets[count.index].cidr_block
  availability_zone       = local.public_subnets[count.index].availability_zone
  map_public_ip_on_launch = local.public_subnets[count.index].map_public_ip
  
  
  
  tags = merge(local.common_tags, {
    Name = local.public_subnets[count.index].name
    Type = "Public"
    Tier = "Public"
  })
}

# Private Subnets
resource "aws_subnet" "private" {
  count = length(local.private_subnets)
  
  vpc_id            = aws_vpc.main.id
  cidr_block        = local.private_subnets[count.index].cidr_block
  availability_zone = local.private_subnets[count.index].availability_zone
  
  
  
  tags = merge(local.common_tags, {
    Name = local.private_subnets[count.index].name
    Type = "Private"
    Tier = "Application"
  })
}

# Database Subnets
resource "aws_subnet" "database" {
  count = length(local.database_subnets)
  
  vpc_id            = aws_vpc.main.id
  cidr_block        = local.database_subnets[count.index].cidr_block
  availability_zone = local.database_subnets[count.index].availability_zone
  
  
  
  tags = merge(local.common_tags, {
    Name = local.database_subnets[count.index].name
    Type = "Database"
    Tier = "Database"
  })
}

# Database Subnet Group
resource "aws_db_subnet_group" "main" {
  count      = var.database_subnet_count > 0 ? 1 : 0
  name       = "${var.project_name}-${var.environment}-db-subnet-group"
  subnet_ids = aws_subnet.database[*].id
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-db-subnet-group"
    Type = "DatabaseSubnetGroup"
  })
}


# Elastic IPs for NAT Gateways
resource "aws_eip" "nat" {
  count  = local.nat_gateway_count
  domain = "vpc"
  
  depends_on = [aws_internet_gateway.main]
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-nat-eip-${count.index + 1}"
    Type = "NATGatewayEIP"
  })
}

# NAT Gateways
resource "aws_nat_gateway" "main" {
  count         = local.nat_gateway_count
  allocation_id = aws_eip.nat[count.index].id
  subnet_id     = aws_subnet.public[count.index % length(aws_subnet.public)].id
  
  depends_on = [aws_internet_gateway.main]
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-nat-gateway-${count.index + 1}"
    Type = "NATGateway"
  })
}


# Route Tables
resource "aws_route_table" "public" {
  count  = var.public_subnet_count > 0 ? 1 : 0
  vpc_id = aws_vpc.main.id
  
  
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main[0].id
  }
  
  
  
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-public-rt"
    Type = "PublicRouteTable"
  })
}

resource "aws_route_table" "private" {
  count  = var.private_subnet_count > 0 ? (var.nat_gateway_strategy == "per-az" ? var.availability_zones : 1) : 0
  vpc_id = aws_vpc.main.id
  
  
  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.main[var.nat_gateway_strategy == "per-az" ? count.index : 0].id
  }
  
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-private-rt-${count.index + 1}"
    Type = "PrivateRouteTable"
  })
}

resource "aws_route_table" "database" {
  count  = var.database_subnet_count > 0 ? 1 : 0
  vpc_id = aws_vpc.main.id
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-database-rt"
    Type = "DatabaseRouteTable"
  })
}

# Route Table Associations
resource "aws_route_table_association" "public" {
  count          = length(aws_subnet.public)
  subnet_id      = aws_subnet.public[count.index].id
  route_table_id = aws_route_table.public[0].id
}

resource "aws_route_table_association" "private" {
  count          = length(aws_subnet.private)
  subnet_id      = aws_subnet.private[count.index].id
  route_table_id = aws_route_table.private[var.nat_gateway_strategy == "per-az" ? count.index % var.availability_zones : 0].id
}

resource "aws_route_table_association" "database" {
  count          = length(aws_subnet.database)
  subnet_id      = aws_subnet.database[count.index].id
  route_table_id = aws_route_table.database[0].id
}


# Default Security Groups
resource "aws_security_group" "web_tier" {
  count       = contains(var.security_group_templates, "web-tier") ? 1 : 0
  name        = "${var.project_name}-${var.environment}-web-tier-sg"
  description = "Security group for web tier"
  vpc_id      = aws_vpc.main.id
  
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTP"
  }
  
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    description = "HTTPS"
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "All outbound traffic"
  }
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-web-tier-sg"
    Type = "SecurityGroup"
    Tier = "Web"
  })
}

resource "aws_security_group" "app_tier" {
  count       = contains(var.security_group_templates, "app-tier") ? 1 : 0
  name        = "${var.project_name}-${var.environment}-app-tier-sg"
  description = "Security group for application tier"
  vpc_id      = aws_vpc.main.id
  
  ingress {
    from_port       = 8080
    to_port         = 8080
    protocol        = "tcp"
    security_groups = contains(var.security_group_templates, "web-tier") ? [aws_security_group.web_tier[0].id] : []
    description     = "Application port from web tier"
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "All outbound traffic"
  }
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-app-tier-sg"
    Type = "SecurityGroup"
    Tier = "Application"
  })
}

resource "aws_security_group" "db_tier" {
  count       = contains(var.security_group_templates, "db-tier") ? 1 : 0
  name        = "${var.project_name}-${var.environment}-db-tier-sg"
  description = "Security group for database tier"
  vpc_id      = aws_vpc.main.id
  
  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = contains(var.security_group_templates, "app-tier") ? [aws_security_group.app_tier[0].id] : []
    description     = "MySQL/Aurora from app tier"
  }
  
  ingress {
    from_port       = 5432
    to_port         = 5432
    protocol        = "tcp"
    security_groups = contains(var.security_group_templates, "app-tier") ? [aws_security_group.app_tier[0].id] : []
    description     = "PostgreSQL from app tier"
  }
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-db-tier-sg"
    Type = "SecurityGroup"
    Tier = "Database"
  })
}






# VPC Flow Logs
resource "aws_flow_log" "vpc" {
  count           = var.enable_vpc_flow_logs ? 1 : 0
  iam_role_arn    = aws_iam_role.flow_log[0].arn
  log_destination = var.vpc_flow_logs_destination == "cloudwatch" ? aws_cloudwatch_log_group.vpc_flow_logs[0].arn : aws_s3_bucket.vpc_flow_logs[0].arn
  traffic_type    = var.vpc_flow_logs_traffic_type
  vpc_id          = aws_vpc.main.id
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-vpc-flow-logs"
    Type = "VPCFlowLogs"
  })
}

# CloudWatch Log Group for VPC Flow Logs
resource "aws_cloudwatch_log_group" "vpc_flow_logs" {
  count             = var.enable_vpc_flow_logs && var.vpc_flow_logs_destination == "cloudwatch" ? 1 : 0
  name              = "/aws/vpc/flowlogs/${var.project_name}-${var.environment}"
  retention_in_days = 30
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-vpc-flow-logs"
    Type = "CloudWatchLogGroup"
  })
}

# S3 Bucket for VPC Flow Logs
resource "aws_s3_bucket" "vpc_flow_logs" {
  count  = var.enable_vpc_flow_logs && var.vpc_flow_logs_destination == "s3" ? 1 : 0
  bucket = "${var.project_name}-${var.environment}-vpc-flow-logs-${random_id.bucket_suffix[0].hex}"
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-vpc-flow-logs"
    Type = "S3Bucket"
    Purpose = "VPCFlowLogs"
  })
}

resource "random_id" "bucket_suffix" {
  count       = var.enable_vpc_flow_logs && var.vpc_flow_logs_destination == "s3" ? 1 : 0
  byte_length = 4
}

# IAM Role for VPC Flow Logs
resource "aws_iam_role" "flow_log" {
  count = var.enable_vpc_flow_logs ? 1 : 0
  name  = "${var.project_name}-${var.environment}-vpc-flow-logs-role"
  
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "vpc-flow-logs.amazonaws.com"
        }
      }
    ]
  })
  
  tags = merge(local.common_tags, {
    Name = "${var.project_name}-${var.environment}-vpc-flow-logs-role"
    Type = "IAMRole"
  })
}

resource "aws_iam_role_policy" "flow_log" {
  count = var.enable_vpc_flow_logs ? 1 : 0
  name  = "${var.project_name}-${var.environment}-vpc-flow-logs-policy"
  role  = aws_iam_role.flow_log[0].id
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams"
        ]
        Effect = "Allow"
        Resource = "*"
      }
    ]
  })
}
