# Advanced AWS Multi-Environment Networking Infrastructure Variables
# Generated by Backstage Advanced AWS Networking Template

# Project Information Variables
variable "project_name" {
  description = "Name of the project (used for resource naming)"
  type        = string
  validation {
    condition     = can(regex("^[a-z0-9][a-z0-9-]*[a-z0-9]$", var.project_name))
    error_message = "Project name must be lowercase, alphanumeric, and can contain hyphens (but not at the beginning or end)."
  }
}

variable "client_name" {
  description = "Name of the client or organization"
  type        = string
}

variable "description" {
  description = "Description of the project"
  type        = string
}

variable "cost_center" {
  description = "Cost center or billing identifier"
  type        = string
  default     = ""
}

variable "technical_contact" {
  description = "Technical contact email for the infrastructure"
  type        = string
  validation {
    condition     = can(regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$", var.technical_contact))
    error_message = "Technical contact must be a valid email address."
  }
}

variable "deployment_timeline" {
  description = "Expected deployment timeline"
  type        = string
  default     = "1-week"
  validation {
    condition     = contains(["immediate", "1-week", "2-weeks", "1-month", "custom"], var.deployment_timeline)
    error_message = "Deployment timeline must be one of: immediate, 1-week, 2-weeks, 1-month, custom."
  }
}

# Regional Configuration Variables
variable "region" {
  description = "AWS region where resources will be deployed"
  type        = string
  validation {
    condition = contains([
      "ap-southeast-2", "ap-southeast-1", "us-east-1", "us-east-2", 
      "us-west-1", "us-west-2", "eu-west-1", "eu-central-1", 
      "ca-central-1", "ap-northeast-1", "ap-south-1", "eu-north-1"
    ], var.region)
    error_message = "Region must be a valid AWS region."
  }
}

variable "availability_zones" {
  description = "Number of availability zones to use"
  type        = number
  default     = 2
  validation {
    condition     = var.availability_zones >= 2 && var.availability_zones <= 4
    error_message = "Number of availability zones must be between 2 and 4."
  }
}

variable "multi_region_deployment" {
  description = "Enable multi-region deployment"
  type        = bool
  default     = false
}

# Environment Configuration Variables
variable "environment" {
  description = "Environment name (development, uat, production)"
  type        = string
  validation {
    condition     = contains(["development", "uat", "production"], var.environment)
    error_message = "Environment must be one of: development, uat, production."
  }
}

variable "account_id" {
  description = "AWS Account ID for the environment"
  type        = string
  default     = ""
  validation {
    condition     = var.account_id == "" || can(regex("^[0-9]{12}$", var.account_id))
    error_message = "Account ID must be a 12-digit number or empty."
  }
}

variable "environment_name" {
  description = "Custom environment name (overrides default environment naming)"
  type        = string
  default     = ""
}

# VPC Configuration Variables
variable "vpc_cidr" {
  description = "CIDR block for the VPC"
  type        = string
  validation {
    condition     = can(cidrhost(var.vpc_cidr, 0))
    error_message = "VPC CIDR must be a valid IPv4 CIDR block."
  }
}

variable "enable_dns_hostnames" {
  description = "Enable DNS hostnames in the VPC"
  type        = bool
  default     = true
}

variable "enable_dns_resolution" {
  description = "Enable DNS resolution in the VPC"
  type        = bool
  default     = true
}

variable "enable_ipv6" {
  description = "Enable IPv6 support for the VPC"
  type        = bool
  default     = false
}

# Subnet Configuration Variables
variable "public_subnet_count" {
  description = "Number of public subnets to create"
  type        = number
  default     = 2
  validation {
    condition     = var.public_subnet_count >= 0 && var.public_subnet_count <= 10
    error_message = "Public subnet count must be between 0 and 10."
  }
}

variable "private_subnet_count" {
  description = "Number of private subnets to create"
  type        = number
  default     = 2
  validation {
    condition     = var.private_subnet_count >= 0 && var.private_subnet_count <= 10
    error_message = "Private subnet count must be between 0 and 10."
  }
}

variable "database_subnet_count" {
  description = "Number of database subnets to create"
  type        = number
  default     = 2
  validation {
    condition     = var.database_subnet_count >= 0 && var.database_subnet_count <= 10
    error_message = "Database subnet count must be between 0 and 10."
  }
}

variable "subnet_sizing_strategy" {
  description = "Strategy for sizing subnets"
  type        = string
  default     = "equal"
  validation {
    condition     = contains(["equal", "custom", "percentage"], var.subnet_sizing_strategy)
    error_message = "Subnet sizing strategy must be one of: equal, custom, percentage."
  }
}

variable "map_public_ip_on_launch" {
  description = "Map public IP on launch for public subnets"
  type        = bool
  default     = true
}

# Gateway Configuration Variables
variable "create_internet_gateway" {
  description = "Create an Internet Gateway"
  type        = bool
  default     = true
}

variable "nat_gateway_strategy" {
  description = "NAT Gateway deployment strategy"
  type        = string
  default     = "single"
  validation {
    condition     = contains(["none", "single", "per-az"], var.nat_gateway_strategy)
    error_message = "NAT Gateway strategy must be one of: none, single, per-az."
  }
}

variable "nat_gateway_type" {
  description = "Type of NAT Gateway"
  type        = string
  default     = "gateway"
  validation {
    condition     = contains(["gateway", "instance"], var.nat_gateway_type)
    error_message = "NAT Gateway type must be one of: gateway, instance."
  }
}

variable "enable_vpn_gateway" {
  description = "Enable VPN Gateway"
  type        = bool
  default     = false
}

variable "vpn_gateway_type" {
  description = "Type of VPN Gateway"
  type        = string
  default     = "ipsec.1"
  validation {
    condition     = contains(["ipsec.1"], var.vpn_gateway_type)
    error_message = "VPN Gateway type must be ipsec.1."
  }
}

# Advanced Networking Features Variables
variable "enable_vpc_peering" {
  description = "Enable VPC peering between environments"
  type        = bool
  default     = false
}

variable "create_default_security_groups" {
  description = "Create default security groups"
  type        = bool
  default     = true
}

variable "security_group_templates" {
  description = "List of security group templates to create"
  type        = list(string)
  default     = []
  validation {
    condition = alltrue([
      for template in var.security_group_templates :
      contains(["web-tier", "app-tier", "db-tier", "bastion", "load-balancer"], template)
    ])
    error_message = "Security group templates must be from: web-tier, app-tier, db-tier, bastion, load-balancer."
  }
}

variable "use_custom_nacls" {
  description = "Use custom Network ACLs"
  type        = bool
  default     = false
}

variable "enable_vpc_endpoints" {
  description = "Enable VPC endpoints"
  type        = bool
  default     = false
}

variable "vpc_endpoint_services" {
  description = "List of AWS services for VPC endpoints"
  type        = list(string)
  default     = []
  validation {
    condition = alltrue([
      for service in var.vpc_endpoint_services :
      contains(["s3", "ecr-api", "ecr-dkr", "ec2", "ssm", "logs", "monitoring"], service)
    ])
    error_message = "VPC endpoint services must be from: s3, ecr-api, ecr-dkr, ec2, ssm, logs, monitoring."
  }
}

# Monitoring and Logging Variables
variable "enable_vpc_flow_logs" {
  description = "Enable VPC Flow Logs"
  type        = bool
  default     = false
}

variable "vpc_flow_logs_destination" {
  description = "Destination for VPC Flow Logs"
  type        = string
  default     = "cloudwatch"
  validation {
    condition     = contains(["cloudwatch", "s3"], var.vpc_flow_logs_destination)
    error_message = "VPC Flow Logs destination must be either cloudwatch or s3."
  }
}

variable "vpc_flow_logs_traffic_type" {
  description = "Type of traffic to log"
  type        = string
  default     = "ALL"
  validation {
    condition     = contains(["ALL", "ACCEPT", "REJECT"], var.vpc_flow_logs_traffic_type)
    error_message = "VPC Flow Logs traffic type must be one of: ALL, ACCEPT, REJECT."
  }
}

variable "enable_cloudwatch_monitoring" {
  description = "Enable CloudWatch monitoring"
  type        = bool
  default     = true
}

variable "create_cloudwatch_alerts" {
  description = "Create CloudWatch alerts"
  type        = bool
  default     = false
}

# Tagging Variables
variable "custom_tags" {
  description = "Custom tags to apply to all resources"
  type        = map(string)
  default     = {}
}

variable "tag_inheritance_strategy" {
  description = "Tag inheritance strategy"
  type        = string
  default     = "merge"
  validation {
    condition     = contains(["merge", "override", "append"], var.tag_inheritance_strategy)
    error_message = "Tag inheritance strategy must be one of: merge, override, append."
  }
}

# GitHub Actions Variables
variable "enable_github_actions" {
  description = "Enable GitHub Actions workflows"
  type        = bool
  default     = true
}
